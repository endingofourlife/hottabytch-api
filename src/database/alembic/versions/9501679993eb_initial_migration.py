"""initial migration

Revision ID: 9501679993eb
Revises: 
Create Date: 2025-07-08 19:48:53.318421

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '9501679993eb'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('programming_languages',
    sa.Column('language_id', sa.INTEGER(), autoincrement=True, nullable=False, comment='Unique identifier for the programming language'),
    sa.Column('name', sa.String(length=20), nullable=False, comment='Name of the programming language'),
    sa.PrimaryKeyConstraint('language_id')
    )
    op.create_index(op.f('ix_programming_languages_name'), 'programming_languages', ['name'], unique=True)
    op.create_table('lessons',
    sa.Column('lesson_id', sa.INTEGER(), autoincrement=True, nullable=False, comment='Unique identifier for the lesson'),
    sa.Column('title', sa.String(length=100), nullable=False, comment='Title of the lesson'),
    sa.Column('description', sa.String(length=500), nullable=True, comment='Description of the lesson'),
    sa.Column('language_id', sa.INTEGER(), nullable=False, comment='ID of the active programming language'),
    sa.ForeignKeyConstraint(['language_id'], ['programming_languages.language_id'], ),
    sa.PrimaryKeyConstraint('lesson_id')
    )
    op.create_table('users',
    sa.Column('user_id', sa.BIGINT(), nullable=False, comment='Telegram user ID'),
    sa.Column('first_name', sa.String(length=50), nullable=False, comment='First name of the user'),
    sa.Column('username', sa.String(length=50), nullable=True, comment='Unique username of the user. Got from the telegram profile'),
    sa.Column('streak', sa.INTEGER(), nullable=False, comment='Current streak of consecutive days'),
    sa.Column('last_lesson_date', sa.TIMESTAMP(timezone=True), nullable=True, comment='Date of the last completed lesson'),
    sa.Column('timezone', sa.String(length=50), server_default='UTC', nullable=False, comment='Timezone of the user, default is UTC'),
    sa.Column('xp', sa.INTEGER(), nullable=False, comment='Total XP earned by the user'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False, comment='Date when the user was created'),
    sa.Column('active_language_id', sa.INTEGER(), nullable=True, comment='ID of the active programming language'),
    sa.ForeignKeyConstraint(['active_language_id'], ['programming_languages.language_id'], ),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('username')
    )
    op.create_index(op.f('ix_users_last_lesson_date'), 'users', ['last_lesson_date'], unique=False)
    op.create_table('questions',
    sa.Column('question_id', sa.INTEGER(), autoincrement=True, nullable=False, comment='Unique identifier for the question'),
    sa.Column('question_text', sa.String(length=500), nullable=False, comment='Question text'),
    sa.Column('lesson_id', sa.INTEGER(), nullable=False, comment='ID of the lesson this question belongs to'),
    sa.ForeignKeyConstraint(['lesson_id'], ['lessons.lesson_id'], ),
    sa.PrimaryKeyConstraint('question_id')
    )
    op.create_table('user_progress',
    sa.Column('progress_id', sa.INTEGER(), autoincrement=True, nullable=False, comment='Unique identifier for the user progress record'),
    sa.Column('completed_at', sa.TIMESTAMP(), nullable=False, comment='Timestamp when the lesson was completed'),
    sa.Column('xp_earned', sa.INTEGER(), nullable=False, comment='XP earned for completing the lesson'),
    sa.Column('success_percent', sa.INTEGER(), nullable=False, comment='Success percentage for the completed lesson'),
    sa.Column('user_id', sa.BIGINT(), nullable=False, comment='ID of the user who completed the lesson'),
    sa.Column('lesson_id', sa.INTEGER(), nullable=False, comment='ID of the lesson that was completed'),
    sa.ForeignKeyConstraint(['lesson_id'], ['lessons.lesson_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('progress_id')
    )
    op.create_table('answers',
    sa.Column('answer_id', sa.INTEGER(), autoincrement=True, nullable=False, comment='Unique identifier for the answer'),
    sa.Column('answer_text', sa.String(length=255), nullable=False, comment='Text of the answer'),
    sa.Column('is_correct', sa.INTEGER(), nullable=False, comment='Indicates if the answer is correct (1 for true, 0 for false)'),
    sa.Column('question_id', sa.INTEGER(), nullable=False, comment='ID of the question this answer belongs to'),
    sa.ForeignKeyConstraint(['question_id'], ['questions.question_id'], ),
    sa.PrimaryKeyConstraint('answer_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('answers')
    op.drop_table('user_progress')
    op.drop_table('questions')
    op.drop_index(op.f('ix_users_last_lesson_date'), table_name='users')
    op.drop_table('users')
    op.drop_table('lessons')
    op.drop_index(op.f('ix_programming_languages_name'), table_name='programming_languages')
    op.drop_table('programming_languages')
    # ### end Alembic commands ###
